# -*- encoding: utf-8 -*-
#class foR CHECK methods
import requests
import socket
 #datetime
from datetime import datetime
     
class Checker:
    
    def checkOptionMethods(self,hostname):
        try:
            r = requests.options('http://'+ hostname, timeout=5)
            print(r.headers['allow'])
        except KeyError:
            # Key is not present
            print "Not allow methods found!"
            pass
        except Exception,e:
                print "Error to connect with " + hostname + " for obtain option methods" 
                pass
    
    def checkOpenPorts(self,hostname,portlist):
        # Check what time the scan started
        t1 = datetime.now()
        print "Cheking ports...."
        print portlist
        try:
            for port in portlist:
                sock= socket.socket(socket.AF_INET,socket.SOCK_STREAM)
                sock.settimeout(5)
                result = sock.connect_ex((hostname,port))
                if result == 0:
                    print "Port {}: \t Open".format(port)
                sock.close()
        except KeyError:
            # Key is not present
            print "Error checking ports!"
            pass
        except socket.gaierror:
            print 'Hostname could not be resolved. Exiting'
            sys.exit()
        except socket.error:
            print "Couldn't connect to server"
            sys.exit()
        
        # Checking the time again
        t2 = datetime.now()

        # Calculates the difference of time, to see how long it took to run the script
        total =  t2 - t1

        # Printing the information to screen
        print 'Scanning Completed in: ', total

    def checkHeadersInfoByHostName(self,hostname):
        # Get the headers of a given hostname
        resp = requests.head('http://'+hostname)
        print resp.status_code, resp.text, resp.headers

        response = requests.get('http://'+hostname)
        for header, value in response.headers.items():
            print header+' : '+value

    def checkHeadersInfoByIp(self,ip):
        # Get the headers of a given IP
        resp = requests.head('http://'+ip)
        print resp.status_code, resp.text, resp.headers

        response = requests.get('http://'+ip)
        for header, value in response.headers.items():
            print header+' : '+value