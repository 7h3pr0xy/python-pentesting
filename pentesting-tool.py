# -*- encoding: utf-8 -*-
'''
Author:Jose Manuel Ortega
email:jmoc25@gmnail.com
'''
import sys
import os
import nmap
import socket
import getopt, sys
import platform
import urllib, urllib2, requests, json
import ftplib
from bs4 import BeautifulSoup
import time
import utils

#datetime
from datetime import datetime


#for request password
import getpass

from Log import Log
from NexposeFrameWork import NexposeFrameWork
from MetaSploitFrameWork import MetaSploitFrameWork
from UtilDNS import UtilDNS
from ShodanSearch import ShodanSearch
from SSHConnection import SSHConnection
from FTPConnection import FTPConnection
from Checker import Checker
from Scraping import Scraping
from InfoLocation import InfoLocation
from ScanningNMAP import ScanningNMAP
from HTTPScan import HTTPScan
from CheckOpenSslVulnerable import CheckOpenSslVulnerable

#nexpose
import pynexposeHttps

		
def showMenu():
    print "\n(0)-->EXIT"
    print "(1)-->Check Open Ports"
    print "(2)-->Check Option methods"
    print "(3)-->Check DNS Servers info"
    print "(4)-->Check Host info fron Shodan Service"
    print "(5)-->NMAP Scanning"
    print "(6)-->Host Info by Socket Call"
    print "(7)-->GeoLocation Host Info"
    print "(8)-->Scraping for images and pdf & obtain metadata"
    print "(9)-->Get Headers info"
    print "(10)-->Get SSH user/password Brute Force"
    print "(11)-->Get FTP Anonymous access"
    print "(12)-->MetaSploitFrameWork"
    print "(13)-->NexposeFramework"
    print "(14)-->HTTP SCAN"
    print "(15)-->Check HeartBleed OpenSSL vulnerability"
    print "(16)-->Check Domains"
    option = raw_input ("Choose an option:")
    return option
    
if __name__ == "__main__":

    shodanSearch = ShodanSearch()
    dnsResolver = UtilDNS()
    sshConnection = SSHConnection()
    checker = Checker()
    scraping = Scraping()
    scanningNMAP = ScanningNMAP()
    infoLocation = InfoLocation()
    httpScan = HTTPScan()
    checkOpenSslVulnerable = CheckOpenSslVulnerable()

    portlist = [21,22,80,8080,443,5432,3306,27017,55553,1241,9160,389,5900]
    ip = ""
    hostname = ""
    option = ""

    ip_server_metasploit = ""
    port_server_metasploit = ""
    user_metasploit = ""
    password_metasploit = ""

    pyconnect = 0
    
    while (hostname ==""):
        hostname = raw_input ("Introduce IP or name domain:")
    
    
    print("\nObtain Ip address from host name")
    print "-----------------------------------"
    ip = socket.gethostbyname(hostname)
    print 'The IP address of ', hostname, 'is', ip
    
    
    while option != 0:
        option = showMenu()
        if option == "0":
           sys.exit(1);
        if option == "1":
            f = open('logOpenPorts.txt', 'a')
            sys.stdout = Log(sys.stdout, f)
            checker.checkOpenPorts(ip,portlist)
        if option == "2":
            f = open('logOptionMethods.txt', 'a')
            sys.stdout = Log(sys.stdout, f)
            checker.checkOptionMethods(hostname)
        if option == "3":
            f = open('logDnsInfo.txt', 'a')
            sys.stdout = Log(sys.stdout, f)
            dnsResolver.checkDNSInfo(ip,hostname)
        if option == "4":
            f = open('logHostInfo.txt', 'a')
            sys.stdout = Log(sys.stdout, f)
            shodanSearch.obtain_host_info(ip)
        if option == "5":
            f = open('logNScanningNmap.txt', 'a')
            sys.stdout = Log(sys.stdout, f)
            scanningNMAP.scanNMAP(ip,portlist)
            if platform.system() == "Linux":
                scanningNMAP.scanningNmapUnix(ip,hostname)
            if platform.system() == "Windows":
                scanningNMAP.scanningNmapWindows(ip,hostname)
        if option == "6":
            f = open('logHostByName.txt', 'a')
            sys.stdout = Log(sys.stdout, f)
            print socket.gethostbyname(hostname)
        if option == "7":
            f = open('logGeoLocationInfo.txt', 'a')
            sys.stdout = Log(sys.stdout, f)
            infoLocation.geoInfo(hostname,ip)
        if option == "8":
            f = open('logScraping.txt', 'a')
            sys.stdout = Log(sys.stdout, f)
            print '\njpg images'
            print '--------------'
            scraping.getImgFromUrl(hostname, 'jpg')
            print '\npng images'
            print '--------------'
            scraping.getImgFromUrl(hostname, 'png')
            print '\ngif images'
            print '--------------'
            scraping.getImgFromUrl(hostname, 'gif')
            
            scraping.scrapingImagesPdf(hostname)
            scraping.scrapingImagesPdf(ip)
            scraping.scrapingBeautifulSoup(hostname)
        if option == "9":
            f = open('logCheckHeaders.txt', 'a')
            sys.stdout = Log(sys.stdout, f)
            checker.checkHeadersInfoByIp(ip)
            checker.checkHeadersInfoByHostName(hostname)
        if option == "10":
            f = open('logSSHBruteForce.txt', 'a')
            sys.stdout = Log(sys.stdout, f)
            sshConnection.SSHBruteForce(hostname)
        if option == "11":
            f = open('logFTP.txt', 'a')
            sys.stdout = Log(sys.stdout, f)
            ftpConnection = FTPConnection(hostname)
            ftpConnection.ftpConnectionAnonymous()
        if option == "12":

            while (ip_server_metasploit == ""):
                ip_server_metasploit = raw_input ("Introduce IP server where MetaSploit is running:")
            while (port_server_metasploit == ""):
                port_server_metasploit = raw_input ("Introduce Port server where MetaSploit is running:")
            while (user_metasploit == ""):
                user_metasploit = raw_input ("Introduce user for MetaSploit:")
            while (password_metasploit == ""):
                password_metasploit = getpass.getpass ("Introduce password for MetaSploit:")
                
            try:
                f = open('metaSploit_log.txt', 'w')
                sys.stdout = Log(sys.stdout, f)
            
                metaSploitFrameWork = MetaSploitFrameWork(port_server_metasploit,ip_server_metasploit,ip,user_metasploit,password_metasploit)
                metaSploitFrameWork.scanMetaSploitFrameWork()
                
            except Exception,e:
                print "Error to connecting with MetaSploit Server"
                print e
                pass

        if option == "13":
            if pyconnect == 0:
                serveraddr_nexpose = ""
                port_server_nexpose = ""
                user_nexpose = ""
                password_nexpose = ""
                while (serveraddr_nexpose == ""):
                    serveraddr_nexpose = raw_input ("Introduce IP server where Nexpose is running:")
                while (port_server_nexpose == ""):
                    port_server_nexpose = raw_input ("Introduce Port server where Nexpose is running:")
                while (user_nexpose == ""):
                    user_nexpose = raw_input ("Introduce user for Nexpose:")
                while (password_nexpose == ""):
                    password_nexpose = getpass.getpass ("Introduce password for Nexpose:")
                

            try:
                if pyconnect == 0: 
                    pynexposeHttps = pynexposeHttps.NeXposeServer(serveraddr_nexpose, port_server_nexpose, user_nexpose, password_nexpose)
                    pyconnect = 1                
            except Exception,e:
                pyconnect = 0 
                print "Error to connecting with NeXposeServer"
                print e
                pass
            
            try:
                f = open('nexpose_log.txt', 'w')
                sys.stdout = Log(sys.stdout, f)
                nexposeFrameWork = NexposeFrameWork(pynexposeHttps)
                nexposeFrameWork.siteListing()
                nexposeFrameWork.vulnerabilityListing()
                
                pynexposeHttps.logout()
                
            except Exception,e:
                print "Error to connecting with NeXposeServer for listing vulnerabilities"
                print e
                pass
        if option == "14":
            f = open('logHTTPScan.txt', 'a')
            sys.stdout = Log(sys.stdout, f)
            httpScan.startHTTPScanBruteForce(hostname)
        if option == "15":
            f = open('logCheckHeartbleed.txt', 'a')
            sys.stdout = Log(sys.stdout, f)
            checkOpenSslVulnerable.startCheckVulnerability(ip,hostname)
        if option == "16":
            f = open('logCheckDomains.txt', 'a')
            sys.stdout = Log(sys.stdout, f)
            html = utils.HtmlExtractor(hostname)
            #url always starts with http:// or https://
            
            url = html.get_url()
            print url
            #print html.get_body()
            data_extractor = utils.DataExtractor(html.get_body(), url, only_href = True)
            urls = data_extractor.get_urls()
            print "URLS: "
            for temp in urls:
                print temp
            domains = data_extractor.get_domains(urls)
            print "Domains: "
            for temp in domains:
                print temp
            ips = data_extractor.get_ips_for_domains(domains)
            for key in ips.iterkeys():
                print key, ": ", " ".join(ips[key])
            
